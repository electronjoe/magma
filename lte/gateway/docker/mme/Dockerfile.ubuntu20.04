################################################################
# Builder Image (can also be used as developer's image)
################################################################
FROM ubuntu:focal as magma-mme-builder 

ARG GIT_PROXY
ARG FEATURES=mme_oai
ENV MAGMA_ROOT=/magma
ENV BUILD_TYPE=Debug
ENV C_BUILD=/build/c
ENV TZ=Europe/Paris
ENV DEBIAN_FRONTEND=noninteractive

RUN mkdir -p $C_BUILD

RUN echo "Install general purpouse packages" && \
    apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get upgrade -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y \
        apt-transport-https \
        apt-utils \
        autoconf \
        autoconf automake \
        automake \
        build-essential \
        ca-certificates \
        clang-11 \
        clang-format-11 \
        clang-tidy-11 \
        curl \
        g++ \
        g++-9 \
        gcc-9 \
        lcov \
        git \
        gnupg \
        golang \
        libgmp3-dev \
        libpcap-dev \
        libssl-dev \
        libtool \
        make \
        ninja-build \
        perl \
        pkg-config \
        python2.7 \
        redis-server \
        ruby \
        rubygems \
        ruby-dev \
        software-properties-common \
        tzdata \
        unzip \
        vim \
        wget && \
        gem install fpm && \
        update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/lib/llvm-11/bin/clang-tidy 10 && \
        update-alternatives --install /usr/bin/clang-format clang-format /usr/lib/llvm-11/bin/clang-format 10 && \
        update-alternatives --install /usr/bin/clang clang /usr/lib/llvm-11/bin/clang 10 && \
        update-alternatives --install /usr/bin/clang++ clang++ /usr/lib/llvm-11/bin/clang++ 10

RUN echo "Install 3rd party dependencies" && \
    apt-get update && \
    echo "Install CMake" && \
    apt-get -y install cmake && \
    echo "Install FMT lib requirements" && \
    apt-get -y install libunwind8-dev libelf-dev libdwarf-dev bzip2 && \
    echo "Install Folly requirements" && \
    apt-get -y install libboost-all-dev libevent-dev libdouble-conversion-dev \
    libgoogle-glog-dev libgflags-dev libiberty-dev liblz4-dev liblzma-dev \
    libsnappy-dev binutils-dev libjemalloc-dev libssl-dev pkg-config libunwind-dev && \
    echo "Install check for test support" && \
    apt-get -y install check && \
    echo "Install gtest for test support" && \
    apt-get -y install libgtest-dev && \
    echo "Install FreeDiameter requirements" && \
    apt-get -y install libsctp1 libsctp-dev libgcrypt-dev \
    bison flex libidn11-dev && \
    echo "Install libgtpnl requirements" && \
    apt-get -y install libmnl-dev && \
    echo "Install Nettle requirements" && \
    apt-get install -y libgoogle-glog-dev libconfig-dev libxml2-dev \
    libyaml-cpp-dev nlohmann-json3-dev && \
    echo "Install ZeroMQ" && \
    apt-get install -y libczmq-dev && \
    ln -s /usr/bin/python2.7 /usr/local/bin/python && \
    # TODO(fixup this include in source code @ MConfigLoader.cpp)
    ln -s /usr/include/nlohmann/json.hpp /usr/include/json.hpp

RUN ["/bin/bash", "-c", "if [[ -v GIT_PROXY ]]; then git config --global http.proxy $GIT_PROXY; fi"]

##### NETTLE and GNUTLS
# TODO Upgrade these - requires us to update our use of libnettle due to API migration.
#  see https://gist.github.com/electronjoe/a899e4bfbc2904cb353444386296c38e
# Note the CFLAGS define below due to glibc deprecation of critical flag,
#  see https://github.com/rdslw/openwrt/blob/e5d47f32131849a69a9267de51a30d6be1f0d0ac/tools/bison/patches/110-glibc-change-work-around.patch
RUN wget https://ftp.gnu.org/gnu/nettle/nettle-2.5.tar.gz && \
    tar -xf nettle-2.5.tar.gz && \
    cd nettle-2.5 && \
    mkdir build && \
    cd build/ && \
    ../configure --disable-openssl --enable-shared --libdir=/usr/local/lib && \
    make -j`nproc` && \
    make install && \
    ldconfig -v && \
    cd / && \
    wget http://mirrors.dotsrc.org/gcrypt/gnutls/v3.1/gnutls-3.1.23.tar.xz && \
    tar xf gnutls-3.1.23.tar.xz && \
    cd gnutls-3.1.23 && \
    mkdir build && cd build && \
    CFLAGS=-D_IO_ftrylockfile ../configure --with-libnettle-prefix=/usr/local && \
    make -j`nproc` && \
    make install && \
    ldconfig -v && \
    cd / && \
    rm -rf nettle* && \
    rm -rf gnutls*

##### Useful for logfile modification e.g. pruning all /magma/... prefix from GCC warning logs
RUN GOBIN="/usr/bin/" go get github.com/ezekg/xo

##### GRPC and it's dependencies
RUN git clone --recurse-submodules -b v1.35.0 https://github.com/grpc/grpc && \
    cd grpc && \
    mkdir -p cmake/build && \
    cd cmake/build && \
    cmake -DgRPC_INSTALL=ON -DgRPC_BUILD_TESTS=OFF -DBUILD_SHARED_LIBS=ON ../.. && \
    make -j`nproc` && \
    make install && \
    cd / && \
    rm -rf grpc

##### Prometheus CPP
RUN git clone https://github.com/jupp0r/prometheus-cpp.git && \
    cd prometheus-cpp && \
    git checkout d8326b2bba945a435f299e7526c403d7a1f68c1f && \
    git submodule init && git submodule update && \
    mkdir _build && \
    cd _build/ && \
    cmake .. && \
    make -j`nproc` && \
    make install && \
    rm -rf /prometheus-cpp

##### Redis CPP
RUN git clone https://github.com/cpp-redis/cpp_redis.git && \
    cd cpp_redis && \
    git checkout bbe38a7f83de943ffcc90271092d689ae02b3489 && \
    git submodule init && git submodule update && \
    mkdir build && cd build && \
    cmake .. -DCMAKE_BUILD_TYPE=Release && \
    make -j`nproc` && \
    make install && \
    rm -rf /cpp_redis

##### liblfds
# https://www.liblfds.org/mediawiki/index.php?title=r7.1.0:Building_Guide_(liblfds)
RUN wget https://liblfds.org/downloads/liblfds%20release%207.1.0%20source.tar.bz2  && \
    tar -xf liblfds\ release\ 7.1.0\ source.tar.bz2  && \
    cd liblfds/liblfds7.1.0/liblfds710/build/gcc_gnumake/ && \
    make -j`nproc` && \
    make ar_install && \
    cd / && \
    rm -rf liblfds

##### libgtpnl
# review https://github.com/OPENAIRINTERFACE/openair-cn/blob/master/build/tools/build_helper.gtpnl
RUN git clone https://git.osmocom.org/libgtpnl && \
    cd libgtpnl && \
    git reset --hard 345d687 && \
    autoreconf -fi && \
    ./configure && \
    make -j`nproc` && \
    make install && \
    ldconfig && \
    cd / && \
    rm -rf libgtpnl

#####  asn1c
RUN git clone https://gitlab.eurecom.fr/oai/asn1c.git && \
    cd asn1c && \
    git checkout f12568d617dbf48497588f8e227d70388fa217c9 && \
    autoreconf -iv && \
    ./configure && \
    make -j`nproc` && \
    make install && \
    ldconfig


## Install Fmt (Folly Dep)
RUN git clone https://github.com/fmtlib/fmt.git && cd fmt && \
    mkdir _build && cd _build && \
    cmake -DBUILD_SHARED_LIBS=ON .. && \
    make -j$(nproc) && \
    make install && \
    cd / && \
    rm -rf fmt

##### Facebook Folly C++ lib
# Note: "Because folly does not provide any ABI compatibility guarantees from
#        commit to commit, we generally recommend building folly as a static library."
# Here we checkout the hash for v2021.02.22.00 (arbitrary recent version)
RUN git clone https://github.com/facebook/folly && cd folly && \
    git checkout tags/v2021.02.15.00 && \
    mkdir _build && cd _build && \
    cmake -DBUILD_SHARED_LIBS=ON .. && \
    make -j$(nproc) && \
    make install && \
    cd / && \
    rm -rf folly
    
##### Build and install libgtest and gmock
RUN cd /usr/src/googletest && \
    mkdir build && \
    cd build && \
    cmake -DBUILD_SHARED_LIBS=ON .. && \
    echo "Build gtest and gmock" && \
    make && \
    echo "Install gtest and gmock" && \
    make install && \
    ldconfig -v

#### libtins is required to build the connection_tracker
RUN git clone --branch v4.3 https://github.com/mfontanini/libtins.git && \
    cd libtins && \
    mkdir build && \
    cd build && \
    cmake ../ -DLIBTINS_ENABLE_CXX11=1 && \
    make -j`nproc` && \
    make install && \
    cd / && \
    rm -rf libtins

# Add Converged MME sources to the container
# Must be done prior to FreeDiameter build as we need the patches from Magma repo
COPY ./ $MAGMA_ROOT

##### libfluid is requird to build MME with OVS support
RUN cd /magma/third_party/build/bin && \
    ./libfluid_build.sh && \
    find . -name magma-libfluid_0.1* -exec dpkg -i {} \; && \
    rm -rf /tmp/*

##### FreeDiameter
RUN git clone https://github.com/OPENAIRINTERFACE/opencord.org.freeDiameter.git freediameter && \
    cd freediameter && \
    patch -p1 < $MAGMA_ROOT/lte/gateway/c/oai/patches/0001-opencoord.org.freeDiameter.patch && \
    mkdir build && \
    cd build && \
    cmake ../ && \
    awk '{if (/^DISABLE_SCTP/) gsub(/OFF/, "ON"); print}' CMakeCache.txt > tmp && mv tmp CMakeCache.txt && \
    make -j`nproc` && \
    make install && \
    cd / && \
    rm -rf freediameter

##### Clean up MAGMA_ROOT so others don't accidentally use it.
# E.g. in CI environments access to repo should occur through docker volume from the parent OS.
# Further, some environments assume specific mount points for the source code (e.g. GitHub Actions).
RUN rm -rf $MAGMA_ROOT

# This stage executes the actual build of the OAI. It is maintained as a separate stage
# as many CI users of this dockerfile will want to halt before this step (in ordert to e.g.
# apply custom flags or build behavior).
FROM magma-mme-builder as magma-mme-builder-build

# Add Converged MME sources to the container
# Must be done prior to FreeDiameter build as we need the patches from Magma repo
COPY ./ $MAGMA_ROOT

WORKDIR $MAGMA_ROOT/lte/gateway/
# TODO: Is this release binary by default?
RUN make build_oai

FROM alpine:3.12.4 as magma-mme 

# Copy pre-built shared object files
COPY --from=magma-mme-builder /usr/lib/x86_64-linux-gnu/liblsan.so.0 /usr/lib/
COPY --from=magma-mme-builder /usr/lib/x86_64-linux-gnu/libasan.so.5 /usr/lib/
COPY --from=magma-mme-builder /usr/lib/x86_64-linux-gnu/libubsan.so.1 /usr/lib/
COPY --from=magma-mme-builder /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1 /usr/lib/
COPY --from=magma-mme-builder /usr/lib/x86_64-linux-gnu/libconfig.so.9 /usr/lib/
COPY --from=magma-mme-builder /usr/lib/x86_64-linux-gnu/libglog.so.0  /usr/lib/
COPY --from=magma-mme-builder /usr/lib/x86_64-linux-gnu/libyaml-cpp.so.0.6 /usr/lib/
COPY --from=magma-mme-builder /usr/lib/x86_64-linux-gnu/libsctp.so.1 /usr/lib/
COPY --from=magma-mme-builder /usr/lib/x86_64-linux-gnu/libunwind.so.8 /usr/lib/
COPY --from=magma-mme-builder /usr/lib/x86_64-linux-gnu/libboost_context.so.1.71.0 /usr/lib/
COPY --from=magma-mme-builder /usr/lib/x86_64-linux-gnu/libboost_filesystem.so.1.71.0 /usr/lib/
COPY --from=magma-mme-builder /usr/lib/x86_64-linux-gnu/libboost_program_options.so.1.71.0 /usr/lib/
COPY --from=magma-mme-builder /usr/lib/x86_64-linux-gnu/libboost_regex.so.1.71.0 /usr/lib/
COPY --from=magma-mme-builder /usr/lib/x86_64-linux-gnu/libboost_system.so.1.71.0 /usr/lib/
COPY --from=magma-mme-builder /usr/lib/x86_64-linux-gnu/libdouble-conversion.so.3 /usr/lib/
COPY --from=magma-mme-builder /usr/lib/x86_64-linux-gnu/libevent-2.1.so.7 /usr/lib/
COPY --from=magma-mme-builder /usr/lib/x86_64-linux-gnu/libssl.so.1.1 /usr/lib/
COPY --from=magma-mme-builder /usr/lib/x86_64-linux-gnu/libsnappy.so.1 /usr/lib/
COPY --from=magma-mme-builder /usr/lib/x86_64-linux-gnu/libicui18n.so.66 /usr/lib/
COPY --from=magma-mme-builder /usr/lib/x86_64-linux-gnu/libicuuc.so.66 /usr/lib/
COPY --from=magma-mme-builder /usr/lib/x86_64-linux-gnu/libicudata.so.66 /usr/lib/
COPY --from=magma-mme-builder /usr/lib/x86_64-linux-gnu/libczmq.so.4.2.0 /usr/lib/
COPY --from=magma-mme-builder /usr/lib/x86_64-linux-gnu/libzmq.so.5.2.2 /usr/lib/
COPY --from=magma-mme-builder /usr/lib/x86_64-linux-gnu/libsodium.so.23.3.0 /usr/lib/
COPY --from=magma-mme-builder /usr/lib/x86_64-linux-gnu/libpgm-5.2.so.0.0.122 /usr/lib/
COPY --from=magma-mme-builder /usr/lib/x86_64-linux-gnu/libnorm.so.1.5.8 /usr/lib/
COPY --from=magma-mme-builder /usr/lib/x86_64-linux-gnu/libgflags.so.2.2 /usr/lib/

COPY --from=magma-mme-builder /usr/local/lib/libfdproto.so.6 /usr/local/lib/
COPY --from=magma-mme-builder /usr/local/lib/libfdcore.so.6 /usr/local/lib/
COPY --from=magma-mme-builder /usr/local/lib/libgrpc++.so /usr/local/lib/
COPY --from=magma-mme-builder /usr/local/lib/libprotobuf.so.3.14.0.0 /usr/local/lib/
COPY --from=magma-mme-builder /usr/local/lib/libfolly.so /usr/local/lib/
COPY --from=magma-mme-builder /usr/local/lib/libgrpc.so /usr/local/lib/
COPY --from=magma-mme-builder /usr/local/lib/libgpr.so /usr/local/lib/
# COPY --from=magma-mme-builder /usr/local/lib/libcares.a /usr/local/lib/
COPY --from=magma-mme-builder /usr/local/lib/libaddress_sorting.so /usr/local/lib/
COPY --from=magma-mme-builder /usr/local/lib/libnettle.so.4 /usr/local/lib/
COPY --from=magma-mme-builder /usr/local/lib/libgnutls.so.28 /usr/local/lib/
COPY --from=magma-mme-builder /usr/local/lib/libhogweed.so.2 /usr/local/lib/

COPY --from=magma-mme-builder /lib/x86_64-linux-gnu/libidn.so.11 /usr/lib/

# Copy all fdx files from freeDiameter installation
WORKDIR /usr/local/lib/freeDiameter
COPY --from=magma-mme-builder /usr/local/lib/freeDiameter/* ./

# Refresh library cache
# RUN ldconfig

# Copy pre-built binaries for MME and SCTPD
WORKDIR /magma-mme/bin
COPY --from=magma-mme-builder-build $C_BUILD/oai/oai_mme/mme oai_mme

# Copy the configuration file templates and mean to modify/generate certificates
WORKDIR /magma-mme/etc
COPY --from=magma-mme-builder-build $MAGMA_ROOT/lte/gateway/docker/mme/configs/mme.conf .
COPY --from=magma-mme-builder-build $MAGMA_ROOT/lte/gateway/docker/mme/configs/mme_fd.conf .

# Create running dirs
WORKDIR /var/opt/magma/configs
# Adding mme configuration for stateful run
RUN echo "use_stateless: false" > mme.yml
WORKDIR /usr/local/etc/redis
COPY --from=magma-mme-builder-build $MAGMA_ROOT/lte/gateway/docker/mme/configs/redis_for_container.conf redis.conf

WORKDIR /etc/magma
COPY --from=magma-mme-builder-build $MAGMA_ROOT/lte/gateway/configs/control_proxy.yml .
COPY --from=magma-mme-builder-build $MAGMA_ROOT/lte/gateway/configs/redis.yml .
COPY --from=magma-mme-builder-build $MAGMA_ROOT/lte/gateway/configs/service_registry.yml .

# Adding means to re-generate certificates
WORKDIR /magma-mme/scripts
COPY --from=magma-mme-builder-build $MAGMA_ROOT/lte/gateway/c/oai/test/check_mme_s6a_certificate .
RUN sed -i -e "s@^.*THIS_SCRIPT_PATH@#@" -e "s@\$SUDO@@" check_mme_s6a_certificate
RUN sed -i -e "s@echo_error@echo@" -e "s@echo_success@echo@" -e "s@echo_warning@echo@" check_mme_s6a_certificate

WORKDIR /magma-mme
RUN openssl rand -out /root/.rnd 128
